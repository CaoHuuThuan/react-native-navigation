import groovy.json.JsonSlurper
import org.gradle.api.tasks.testing.logging.TestExceptionFormat

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

def safeExtGet(prop, fallback) {
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

def DEFAULT_COMPILE_SDK_VERSION = 29
def DEFAULT_MIN_SDK_VERSION = 19
def DEFAULT_TARGET_SDK_VERSION = 29
def kotlinVersion = rootProject.ext.get("RNNKotlinVersion")
def kotlinStdlib = safeExtGet('RNNKotlinStdlib', 'kotlin-stdlib-jdk8')
def kotlinCoroutinesCore = safeExtGet('RNNKotlinCoroutinesCore', '1.4.3')

android {
    compileSdkVersion safeExtGet('compileSdkVersion', DEFAULT_COMPILE_SDK_VERSION)

    defaultConfig {
        minSdkVersion safeExtGet('minSdkVersion', DEFAULT_MIN_SDK_VERSION)
        targetSdkVersion safeExtGet('targetSdkVersion', DEFAULT_TARGET_SDK_VERSION)
        versionCode 1
        versionName "1.0"

        externalNativeBuild {
            cmake {
                cppFlags "-fexceptions", "-frtti", "-std=c++1y", "-DONANDROID"
                abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
                arguments '-DANDROID_STL=c++_shared', "-DNODE_MODULES_DIR=${rootDir}/../../node_modules"
            }
        }
    }
    externalNativeBuild {
        cmake {
          path "./CMakeLists.txt"
        }
  }
    packagingOptions {
        excludes = ["**/libc++_shared.so","**/libreactnativeutilsjni.so","**/libfbjni.so", "**/libjsi.so"]
    }
    buildTypes {
        release {
            minifyEnabled false
        }
        debug {
            minifyEnabled false
        }
    }
    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests.includeAndroidResources = true
        unitTests.all { t ->
            maxHeapSize = "4g"
            reports {
                html.enabled true
            }
            testLogging {
                events "PASSED", "SKIPPED", "FAILED"
                exceptionFormat TestExceptionFormat.FULL
                showExceptions true
                showCauses true
                showStackTraces true
            }
            afterSuite { desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    def output = "      ${result.resultType} (${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)     "
                    def repeatLength = output.length()
                    println '\n\n' + ('-' * repeatLength) + '\n' + output + '\n' + ('-' * repeatLength) + '\n'

                    println "see report at file://${t.reports.html.destination}/index.html"
                }
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
    configurations {
        extractHeaders
        extractJNI
    }
}


allprojects { p ->
    p.afterEvaluate {
        p.android.compileOptions.sourceCompatibility JavaVersion.VERSION_1_8
        p.android.compileOptions.targetCompatibility JavaVersion.VERSION_1_8
    }
    p.repositories {
        maven { url "https://jitpack.io" }
    }
}

dependencies {
    implementation "androidx.core:core-ktx:1.3.2"
    implementation "org.jetbrains.kotlin:$kotlinStdlib:$kotlinVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinCoroutinesCore"
    implementation "androidx.constraintlayout:constraintlayout:2.0.4"

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'com.google.android.material:material:1.2.0-alpha03'

    implementation 'com.github.wix-playground:ahbottomnavigation:3.3.0'
//    implementation project(':AHBottomNavigation')
    implementation 'com.github.wix-playground:reflow-animator:1.0.6'
    implementation 'com.github.clans:fab:1.6.4'

    //noinspection GradleDynamicVersion
    implementation 'com.facebook.react:react-native:+'
    //noinspection GradleDynamicVersion
    extractHeaders("com.facebook.fbjni:fbjni:+:headers")
    //noinspection GradleDynamicVersion
    extractJNI("com.facebook.fbjni:fbjni:+")
    def rnAAR = fileTree("${rootDir}/../../node_modules/react-native/android").matching({ it.include "**/**/*.aar" })
            .singleFile

    def inputFile = new File(rootDir, '../../node_modules/react-native/package.json')
    def json = new JsonSlurper().parseText(inputFile.text)
    def reactNativeVersion = json.version as String
    def (major, minor, patch) = reactNativeVersion.tokenize('.')
    extractJNI(files(rnAAR))
    // tests
    testImplementation 'junit:junit:4.12'
    testImplementation "org.robolectric:robolectric:4.4"
    testImplementation 'org.assertj:assertj-core:3.8.0'
    testImplementation 'com.squareup.assertj:assertj-android:1.1.1'
    testImplementation 'org.mockito:mockito-core:3.4.0'
    testImplementation 'org.mockito:mockito-inline:3.4.0'
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
}

task extractAARHeaders {
    doLast {
        configurations.extractHeaders.files.each {
            def file = it.absoluteFile
            copy {
                from zipTree(file)
                into "$buildDir/$file.name"
                include "**/*.h"
            }
        }
    }
}

task extractJNIFiles {
    doLast {
        configurations.extractJNI.files.each {
            def file = it.absoluteFile

            copy {
                from zipTree(file)
                into "$buildDir/$file.name"
                include "jni/**/*"
            }
        }
    }
}

tasks.whenTaskAdded { task ->
    if (task.name.contains('externalNativeBuild')) {
        task.dependsOn(extractAARHeaders)
        task.dependsOn(extractJNIFiles)
    }
}